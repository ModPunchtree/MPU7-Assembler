

// R1 = accumulator
// R2 = char0
// R3 = char1
// R4 = char2

// R5 = tens
// R6 = ones

// '+' = 67
// '-' = 68
// '*' = 69
// '/' = 14

// only numbers 0 to 99

// VSH
// print '>'
// ask for input
// wait for IN flag
// clear IN reg

// read input values into registers R2/R3/R4

// test if R2 > 9 (AKA R2 == operator)
// if true:
//  if R4 == 127:
//      RST R5
//      MOV R6 R3
//  else:
//      MOV R5 R3
//      MOV R6 R4
// if false:
//  if R3 == 127:
//      RST R5
//      MOV R6 R2
//  else:
//      MOV R5 R2
//      MOV R6 R3

// convert to base2
// do R5 * 10
// R6 += above

// test if R2 < 10
// if true:
//  MOV R1 R6
//  goto .printResult
// if false:
//  if R2 == '+':
//      R1 += R6
//      goto .printResult
//  else if R2 == '-':
//      R1 -= R6
//      goto .printResult
//  else if R2 == '*':
//      do R1 * R6
//      R1 = above
//      goto .printResult
//  else:                   R2 == '/'
//      do R1 / R6

// .printResult
// send R1 to BCD converter
// VSH
// print result
// jump back to start (make sure to stall for 2 cycles before VSH)


.input
    SETX(R0) VSH() SPT(146);; // ADD(X, VSH, R0)
    PRT('>');;

.wait
    STL(.wait) ADD(R0, R0, IN) FLG(IN); ADC(X, R0, R0) SPT(0); // X = 1

.readInput
    SETX(2);; // 1
    SETX(3);; // 2
    ADD(R0, R0, IN);; // 3
    ;; // 4
    ;; // 5
    ;; // 6
    ;; // 7
    ;; // 8
    ;; // 9
    ;; // 10
    ;; // 11
    ;; // 12
    ;; // 13
    ;; // 14
    ;; // 15
    ;; // 16
    ;; // 17
    ;; // 18
    ;; // 19
    ;; // 20
    ;; // 21
    ;; // 22
    ;; // 23
    ADD(R2, R0, DSR);;
    ADD(R3, R0, DSR);;
    ADD(R4, R0, DSR);;

.findNumber
    SUB(R0, 9, R2) FLG(!CF);;
    RPT(.operator);;
    ;;
    ;;
    .number
        SUB(R0, R3, 127) FLG(ZF); SUB(R0, R4, 127) FLG(ZF) STL(RET);
        ;;
        JMP(.convertToBase2);;
        ;;
        MOV(R5, R2); RST(R5) FFG();
        MOV(R6, R3); MOV(R6, R2);

    .operator
        MOV(R5, R3); RST(R5) FFG();
        MOV(R6, R4); MOV(R6, R3);

.convertToBase2
    STR(R5) SPT(129);; // 41 //////////////////////////////////////
    SPT(128);; // 42
    STR(10);; // 43
    ;; // 1 // 44
    ;; // 2 // 45
    ;; // 3 // 46
    ;; // 4 // 47
    ;; // 5 // 48
    ;; // 6 // 49
    ;; // 7 // 50
    ;; // 8 // 51
    ;; // 9 // 52
    ;; // 10 // 53
    ADD(R6, SR, R6);; // 54

.doOperation
    SUB(R0, R2, 10) FLG(!CF);; // 55
    SUB(R0, R2, '+') FLG(ZF);; // 56
    SUB(R0, R2, '-') FLG(ZF);; // 57
    SUB(R0, R2, '*') FLG(ZF);; // 58
    ; MOV(R1, R6) STL(.printResult); // 59
    ; ADD(R1, R6) STL(.printResult); // 60
    ; SUB(R1, R6) STL(.printResult); // 61
    STR(R1) SPT(131); STR(R6) SPT(129) FFG(); // 62
    STR(R6) SPT(130); STR(R1) SPT(128) FFG(); // 63
    ;; // 1 // 64
    ;; // 2 // 65
    ;; // 3 // 66
    ;; // 4 // 67
    ;; // 5 // 68
    ;; // 6 // 69
    ;; // 7 // 70
    ;; // 8 // 71
    ;; // 9 // 72
    ;; // 10 // 73
    ;; // 11 // 74
    ;; // 12 // 75
    LOD(R1);; // 76

.printResult
    STR(R1) SPT(133);; // 77
    SETX(R0) VSH();; // 1 // 78
    ;; // 2 // 79
    ;; // 3 // 80
    ;; // 4 // 81
    ;; // 5 // 82
    SPT(134);; // 6 // 83
    SPT(133);; // 7 // 84
    ;; // 8 // 85
    ADD(R0, SR, DSW);; // 86
    ADD(R0, SR, DSW) STL(.input);; // 87


